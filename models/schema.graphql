type Domain {	
 	name: String!
	status: String!
	description: String
	OwnerEmail: String
	workflows: [Workflow!]
}

type Workflow {
	id: ID!
	workflowId: String!
	runId: String!
	taskList: String!
	name: String!
	startTime: Time!
	closeTime: Time
	closeStatus: String
	historyLength: Int
	jsonHistory: String	
	result: String
	isDone: Boolean
	isCanceled: Boolean
	inWork: Boolean
	activities: [Activity!]
	createdAt: Time!
}

type Activity{
	id: ID!	
	activityId: String!
	description: String!
	operation: String!
	roles: [String!]
	starttoclosetimeout: Int!
	isDone: Boolean!
	inWork: Boolean!
	isCanceled: Boolean!
	Error: String!	
}

type Query {	
	Domain(name: String): Domain	
	Workflow(id: ID!): Workflow
	allWorkflows(page: Int, perPage: Int, sortField: String, sortOrder: String, filter: String, domain: String): [Workflow]
	allOpenWorkflows(page: Int, perPage: Int, sortField: String, sortOrder: String, filter: String, domain: String): [Workflow]
	allCloseWorkflows(page: Int, perPage: Int, sortField: String, sortOrder: String, filter: String, domain: String): [Workflow]
}

type Mutation {
	workflowStart(workflowname: String!, input: String!): Workflow!
	workflowCancel(reason: String!, input: String!): String
	workflowTerminate(reason: String!, input: String!): String
	activityPerform(activityId: String!, input: String!): String	
	activityFailed(activityId: String!, input: String!): String	
}

type Subscription {
	workflow : Workflow!
}

scalar Time